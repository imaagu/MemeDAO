{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDropModule","getBundleDropModule","process","tokenModule","getTokenModule","voteModule","getVoteModule","App","useWeb3","address","connectWallet","error","provider","signer","getSigner","undefined","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","setProviderOrSigner","balanceOf","then","balance","gt","console","log","catch","getAllClaimerAddresses","addresess","err","getAllHolderBalances","amounts","getAll","length","proposalId","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","name","className","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","value","defaultChecked","htmlFor","label","disabled","onClick","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"qRAKMA,EAAM,IAAIC,IAAY,WACtBC,EAAmBF,EAAIG,oBAC3BC,8CAGIC,EAAcL,EAAIM,eAAeF,8CACjCG,EAAaP,EAAIQ,cAAcJ,8CAuUtBK,EArUH,WACV,MAAoDC,cAA7BC,GAAvB,EAAQC,cAAR,EAAuBD,SAASE,EAAhC,EAAgCA,MAAOC,EAAvC,EAAuCA,SAEjCC,EAASD,EAAWA,EAASE,iBAAcC,EACjD,EAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoDJ,mBAAS,IAA7D,mBAAOK,EAAP,KAA2BC,EAA3B,KACA,EAA8CN,mBAAS,IAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KACA,EAAkCR,mBAAS,IAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAAgCV,oBAAS,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAAgCZ,oBAAS,GAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KA2BAC,qBAAU,WAGRjC,EAAIkC,oBAAoBnB,KACvB,CAACA,IAEJkB,qBAAU,WACR,GAAKtB,EAIL,OAAOT,EACJiC,UAAUxB,EAAS,KACnByB,MAAK,SAACC,GAEDA,EAAQC,GAAG,IACblB,GAAiB,GACjBmB,QAAQC,IAAI,kDAEZpB,GAAiB,GACjBmB,QAAQC,IAAI,6DAGfC,OAAM,SAAC5B,GACNO,GAAiB,GACjBmB,QAAQ1B,MAAM,wBAAyBA,QAE1C,CAACF,IAEJsB,qBAAU,WACHd,GAELjB,EACGwC,uBAAuB,KACvBN,MAAK,SAACO,GACLJ,QAAQC,IAAI,iCAAwBG,GACpCjB,EAAmBiB,MAEpBF,OAAM,SAACG,GACNL,QAAQ1B,MAAM,4BAA6B+B,QAE9C,CAACzB,IAEJc,qBAAU,WACHd,GAGLd,EACGwC,uBACAT,MAAK,SAACU,GACLP,QAAQC,IAAI,uBAAcM,GAC1BtB,EAAsBsB,MAEvBL,OAAM,SAACG,GACNL,QAAQ1B,MAAM,8BAA+B+B,QAEhD,CAACzB,IAEJc,qBAAU,WACHd,GAILZ,EACGwC,SACAX,MAAK,SAACT,GAELC,EAAaD,GACbY,QAAQC,IAAI,0BAAiBb,MAE9Bc,OAAM,SAACG,GACNL,QAAQ1B,MAAM,0BAA2B+B,QAE5C,CAACzB,IAGJc,qBAAU,WACHd,GAIAQ,EAAUqB,QAGfzC,EACGwB,SAASJ,EAAU,GAAGsB,WAAYtC,GAClCyB,MAAK,SAACL,GACLC,EAAYD,GACZQ,QAAQC,IAAI,0CAEbC,OAAM,SAACG,GACNL,QAAQ1B,MAAM,sCAAuC+B,QAExD,CAACzB,EAAeQ,EAAWhB,IAE9B,IAAMuC,EAAaC,mBAAQ,WACzB,OAAO1B,EAAgB2B,KAAI,SAACzC,GAC1B,MAAO,CACLA,UACA0C,YAAaC,IAAOC,MAAMC,YAGxBjC,EAAmBZ,IAAY,EAC/B,UAIL,CAACc,EAAiBF,IAErB,OAAIV,GAAwB,4BAAfA,EAAM4C,KAEf,sBAAKC,UAAU,sBAAf,UACE,2DACA,iIAQFvC,EAEA,sBAAKuC,UAAU,cAAf,UACE,6DACA,kEACA,gCACE,gCACE,6CACA,wBAAOA,UAAU,OAAjB,UACE,gCACE,+BACE,yCACA,mDAGJ,gCACGR,EAAWE,KAAI,SAACO,GACf,OACE,+BACE,8BArKIC,EAqKgBD,EAAOhD,QApKtCiD,EAAIC,UAAU,EAAG,GAAK,MAAQD,EAAIC,UAAUD,EAAIZ,OAAS,MAqK9C,6BAAKW,EAAON,gBAFLM,EAAOhD,SApKX,IAACiD,aA6KhB,gCACE,kDACA,uBACEE,SAAQ,uCAAE,WAAOC,GAAP,eAAAC,EAAA,6DACRD,EAAEE,iBACFF,EAAEG,kBAGFpC,GAAY,GAGNqC,EAAQxC,EAAUyB,KAAI,SAACgB,GAC3B,IAAIC,EAAa,CACfpB,WAAYmB,EAASnB,WAErBqB,KAAM,GAYR,OAVAF,EAASD,MAAMI,SAAQ,SAACD,GACTE,SAASC,eACpBL,EAASnB,WAAa,IAAMqB,EAAKI,MAG1BC,UACPN,EAAWC,KAAOA,EAAKI,SAIpBL,KAxBD,kBA8BmBhE,EAAYuE,gBAAgBjE,GA9B/C,mBAgCa2C,IAAOuB,UAAUC,YAhC9B,kCAkCEzE,EAAY0E,WAAWpE,GAlCzB,mCAsCEqE,QAAQC,IACZd,EAAMf,IAAN,uCAAU,WAAOkB,GAAP,SAAAN,EAAA,sEAGezD,EAAW2E,IAAIZ,EAAKrB,YAHnC,UAKe,IALf,OAKKkC,MALL,yCAOC5E,EAAW+D,KAAKA,EAAKrB,WAAYqB,EAAKA,OAPvC,4EAAV,wDAvCE,mCAuDIU,QAAQC,IACZd,EAAMf,IAAN,uCAAU,WAAOkB,GAAP,SAAAN,EAAA,sEAEezD,EAAW2E,IAChCZ,EAAKrB,YAHC,UAOe,IAPf,OAOKkC,MAPL,yCAQC5E,EAAW6E,QAAQd,EAAKrB,aARzB,2CAAV,wDAxDA,QAqEFjB,GAAY,GAEZO,QAAQC,IAAI,sBAvEV,mDAyEFD,QAAQ1B,MAAM,0BAAd,MAzEE,2DA4EJ0B,QAAQ1B,MAAM,iBAAd,MA5EI,0DA+EN0B,QAAQ1B,MAAM,6BA/ER,yBAkFNiB,GAAY,GAlFN,6FAAF,sDADV,UAuFGH,EAAUyB,KAAI,SAACgB,EAAUiB,GAAX,OACb,sBAA+B3B,UAAU,OAAzC,UACE,6BAAKU,EAASkB,cACd,8BACGlB,EAASD,MAAMf,KAAI,SAACkB,GAAD,OAClB,gCACE,uBACEI,KAAK,QACLa,GAAInB,EAASnB,WAAa,IAAMqB,EAAKI,KACrCjB,KAAMW,EAASnB,WACfuC,MAAOlB,EAAKI,KAEZe,eAA8B,IAAdnB,EAAKI,OAEvB,uBAAOgB,QAAStB,EAASnB,WAAa,IAAMqB,EAAKI,KAAjD,SACGJ,EAAKqB,UAVArB,EAAKI,aAJXN,EAASnB,eAqBrB,wBAAQ2C,SAAU/D,GAAYE,EAAU2C,KAAK,SAA7C,SACG7C,EACG,YACAE,EACA,oBACA,iBAEN,qHAWZQ,QAAQC,IAAI,aAAcnB,GAExB,sBAAKqC,UAAU,WAAf,UACE,+EACA,wBAAQkC,SAAUvE,EAAYwE,QA9SlB,WACdvE,GAAc,GAEdpB,EACG4F,MAAM,IAAK,GACXrD,OAAM,SAACG,GACNL,QAAQ1B,MAAM,kBAAmB+B,GACjCtB,GAAc,MAEfyE,SAAQ,WAEPzE,GAAc,GAEdF,GAAiB,GAEjBmB,QAAQC,IAAR,wGACyFtC,EAAiBS,QAD1G,WA+RF,SACGU,EAAa,aAAe,8BChUrC2E,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CACEC,WAPa,CACjBC,SAAU,IAONC,kBAVoB,CAAC,GAQvB,SAIE,qBAAK3C,UAAU,UAAf,SACE,cAAC,EAAD,UAINc,SAASC,eAAe,W","file":"static/js/main.f4583764.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\r\nimport { useWeb3 } from \"@3rdweb/hooks\";\r\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst sdk = new ThirdwebSDK(\"rinkeby\");\r\nconst bundleDropModule = sdk.getBundleDropModule(\r\n  process.env.REACT_APP_NFT_CONTRACT\r\n);\r\n\r\nconst tokenModule = sdk.getTokenModule(process.env.REACT_APP_TOKEN_CONTRACT);\r\nconst voteModule = sdk.getVoteModule(process.env.REACT_APP_VOTE_CONTRACT);\r\n\r\nconst App = () => {\r\n  const { connectWallet, address, error, provider } = useWeb3();\r\n\r\n  const signer = provider ? provider.getSigner() : undefined;\r\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\r\n  const [isClaiming, setIsClaiming] = useState(false);\r\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\r\n  const [memberAddresses, setMemberAddresses] = useState([]);\r\n  const [proposals, setProposals] = useState([]);\r\n  const [isVoting, setIsVoting] = useState(false);\r\n  const [hasVoted, setHasVoted] = useState(false);\r\n\r\n  const shortenAddress = (str) => {\r\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\r\n  };\r\n\r\n  const mintNft = () => {\r\n    setIsClaiming(true);\r\n    // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\r\n    bundleDropModule\r\n      .claim(\"0\", 1)\r\n      .catch((err) => {\r\n        console.error(\"failed to claim\", err);\r\n        setIsClaiming(false);\r\n      })\r\n      .finally(() => {\r\n        // Stop loading state.\r\n        setIsClaiming(false);\r\n        // Set claim state.\r\n        setHasClaimedNFT(true);\r\n        // Show user their fancy new NFT!\r\n        console.log(\r\n          `🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\r\n        );\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // We pass the signer to the sdk, which enables us to interact with\r\n    // our deployed contract!\r\n    sdk.setProviderOrSigner(signer);\r\n  }, [signer]);\r\n\r\n  useEffect(() => {\r\n    if (!address) {\r\n      return;\r\n    }\r\n\r\n    return bundleDropModule\r\n      .balanceOf(address, \"0\")\r\n      .then((balance) => {\r\n        // If balance is greater than 0, they have our NFT!\r\n        if (balance.gt(0)) {\r\n          setHasClaimedNFT(true);\r\n          console.log(\"🌟 this user has a membership NFT!\");\r\n        } else {\r\n          setHasClaimedNFT(false);\r\n          console.log(\"😭 this user doesn't have a membership NFT.\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setHasClaimedNFT(false);\r\n        console.error(\"failed to nft balance\", error);\r\n      });\r\n  }, [address]);\r\n\r\n  useEffect(() => {\r\n    if (!hasClaimedNFT) return;\r\n\r\n    bundleDropModule\r\n      .getAllClaimerAddresses(\"0\")\r\n      .then((addresess) => {\r\n        console.log(\"🚀 Members addresses\", addresess);\r\n        setMemberAddresses(addresess);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"failed to get member list\", err);\r\n      });\r\n  }, [hasClaimedNFT]);\r\n\r\n  useEffect(() => {\r\n    if (!hasClaimedNFT) return;\r\n\r\n    // Grab all the balances.\r\n    tokenModule\r\n      .getAllHolderBalances()\r\n      .then((amounts) => {\r\n        console.log(\"👜 Amounts\", amounts);\r\n        setMemberTokenAmounts(amounts);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"failed to get token amounts\", err);\r\n      });\r\n  }, [hasClaimedNFT]);\r\n\r\n  useEffect(() => {\r\n    if (!hasClaimedNFT) {\r\n      return;\r\n    }\r\n    // A simple call to voteModule.getAll() to grab the proposals.\r\n    voteModule\r\n      .getAll()\r\n      .then((proposals) => {\r\n        // Set state!\r\n        setProposals(proposals);\r\n        console.log(\"🌈 Proposals:\", proposals);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"failed to get proposals\", err);\r\n      });\r\n  }, [hasClaimedNFT]);\r\n\r\n  // We also need to check if the user already voted.\r\n  useEffect(() => {\r\n    if (!hasClaimedNFT) return;\r\n\r\n    // If we haven't finished retreieving the proposals from the useEffect above\r\n    // then we can't check if the user voted yet!\r\n    if (!proposals.length) return;\r\n\r\n    // Check if the user has already voted on the first proposal.\r\n    voteModule\r\n      .hasVoted(proposals[0].proposalId, address)\r\n      .then((hasVoted) => {\r\n        setHasVoted(hasVoted);\r\n        console.log(\"🥵 User has already voted\");\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"failed to check if wallet has voted\", err);\r\n      });\r\n  }, [hasClaimedNFT, proposals, address]);\r\n\r\n  const memberList = useMemo(() => {\r\n    return memberAddresses.map((address) => {\r\n      return {\r\n        address,\r\n        tokenAmount: ethers.utils.formatUnits(\r\n          // If the address isn't in memberTokenAmounts, it means they don't\r\n          // hold any of our token.\r\n          memberTokenAmounts[address] || 0,\r\n          18\r\n        ),\r\n      };\r\n    });\r\n  }, [memberAddresses, memberTokenAmounts]);\r\n\r\n  if (error && error.name === \"UnsupportedChainIdError\") {\r\n    return (\r\n      <div className=\"unsupported-network\">\r\n        <h2>Please connect to Rinkeby</h2>\r\n        <p>\r\n          This dapp only works on the Rinkeby network, please switch networks in\r\n          your connected wallet.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (hasClaimedNFT) {\r\n    return (\r\n      <div className=\"member-page\">\r\n        <h1>🍪DAO Member Page</h1>\r\n        <p>Congratulations on being a member</p>\r\n        <div>\r\n          <div>\r\n            <h2>Member List</h2>\r\n            <table className=\"card\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Address</th>\r\n                  <th>Token Amount</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {memberList.map((member) => {\r\n                  return (\r\n                    <tr key={member.address}>\r\n                      <td>{shortenAddress(member.address)}</td>\r\n                      <td>{member.tokenAmount}</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div>\r\n            <h2>Active Proposals</h2>\r\n            <form\r\n              onSubmit={async (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                //before we do async things, we want to disable the button to prevent double clicks\r\n                setIsVoting(true);\r\n\r\n                // lets get the votes from the form for the values\r\n                const votes = proposals.map((proposal) => {\r\n                  let voteResult = {\r\n                    proposalId: proposal.proposalId,\r\n                    //abstain by default\r\n                    vote: 2,\r\n                  };\r\n                  proposal.votes.forEach((vote) => {\r\n                    const elem = document.getElementById(\r\n                      proposal.proposalId + \"-\" + vote.type\r\n                    );\r\n\r\n                    if (elem.checked) {\r\n                      voteResult.vote = vote.type;\r\n                      return;\r\n                    }\r\n                  });\r\n                  return voteResult;\r\n                });\r\n\r\n                // first we need to make sure the user delegates their token to vote\r\n                try {\r\n                  //we'll check if the wallet still needs to delegate their tokens before they can vote\r\n                  const delegation = await tokenModule.getDelegationOf(address);\r\n                  // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\r\n                  if (delegation === ethers.constants.AddressZero) {\r\n                    //if they haven't delegated their tokens yet, we'll have them delegate them before voting\r\n                    await tokenModule.delegateTo(address);\r\n                  }\r\n                  // then we need to vote on the proposals\r\n                  try {\r\n                    await Promise.all(\r\n                      votes.map(async (vote) => {\r\n                        // before voting we first need to check whether the proposal is open for voting\r\n                        // we first need to get the latest state of the proposal\r\n                        const proposal = await voteModule.get(vote.proposalId);\r\n                        // then we check if the proposal is open for voting (state === 1 means it is open)\r\n                        if (proposal.state === 1) {\r\n                          // if it is open for voting, we'll vote on it\r\n                          return voteModule.vote(vote.proposalId, vote.vote);\r\n                        }\r\n                        // if the proposal is not open for voting we just return nothing, letting us continue\r\n                        return;\r\n                      })\r\n                    );\r\n                    try {\r\n                      // if any of the propsals are ready to be executed we'll need to execute them\r\n                      // a proposal is ready to be executed if it is in state 4\r\n                      await Promise.all(\r\n                        votes.map(async (vote) => {\r\n                          // we'll first get the latest state of the proposal again, since we may have just voted before\r\n                          const proposal = await voteModule.get(\r\n                            vote.proposalId\r\n                          );\r\n\r\n                          //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\r\n                          if (proposal.state === 4) {\r\n                            return voteModule.execute(vote.proposalId);\r\n                          }\r\n                        })\r\n                      );\r\n                      // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\r\n                      setHasVoted(true);\r\n                      // and log out a success message\r\n                      console.log(\"successfully voted\");\r\n                    } catch (err) {\r\n                      console.error(\"failed to execute votes\", err);\r\n                    }\r\n                  } catch (err) {\r\n                    console.error(\"failed to vote\", err);\r\n                  }\r\n                } catch (err) {\r\n                  console.error(\"failed to delegate tokens\");\r\n                } finally {\r\n                  // in *either* case we need to set the isVoting state to false to enable the button again\r\n                  setIsVoting(false);\r\n                }\r\n              }}\r\n            >\r\n              {proposals.map((proposal, index) => (\r\n                <div key={proposal.proposalId} className=\"card\">\r\n                  <h5>{proposal.description}</h5>\r\n                  <div>\r\n                    {proposal.votes.map((vote) => (\r\n                      <div key={vote.type}>\r\n                        <input\r\n                          type=\"radio\"\r\n                          id={proposal.proposalId + \"-\" + vote.type}\r\n                          name={proposal.proposalId}\r\n                          value={vote.type}\r\n                          //default the \"abstain\" vote to chedked\r\n                          defaultChecked={vote.type === 2}\r\n                        />\r\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\r\n                          {vote.label}\r\n                        </label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <button disabled={isVoting || hasVoted} type=\"submit\">\r\n                {isVoting\r\n                  ? \"Voting...\"\r\n                  : hasVoted\r\n                  ? \"You Already Voted\"\r\n                  : \"Submit Votes\"}\r\n              </button>\r\n              <small>\r\n                This will trigger multiple transactions that you will need to\r\n                sign.\r\n              </small>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  console.log(\"isClaiming\", isClaiming);\r\n  return (\r\n    <div className=\"mint-nft\">\r\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\r\n      <button disabled={isClaiming} onClick={mintNft}>\r\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ThirdwebWeb3Provider } from \"@3rdweb/hooks\";\r\nimport \"./index.css\";\r\nimport App from \"./App.jsx\";\r\n\r\nconst supportedChainIds = [4];\r\n\r\nconst connectors = {\r\n  injected: {},\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThirdwebWeb3Provider\r\n      connectors={connectors}\r\n      supportedChainIds={supportedChainIds}\r\n    >\r\n      <div className=\"landing\">\r\n        <App />\r\n      </div>\r\n    </ThirdwebWeb3Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}