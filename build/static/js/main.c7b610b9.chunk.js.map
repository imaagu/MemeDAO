{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDropModule","getBundleDropModule","process","REACT_APP_NFT_CONTRACT","tokenModule","getTokenModule","REACT_APP_TOKEN_CONTRACT","voteModule","getVoteModule","REACT_APP_VOTE_CONTRACT","App","useWeb3","connectWallet","address","error","provider","signer","getSigner","undefined","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","setProviderOrSigner","balanceOf","then","balance","gt","console","log","catch","getAllClaimerAddresses","addresess","err","getAllHolderBalances","amounts","getAll","length","proposalId","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","name","className","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","value","defaultChecked","htmlFor","label","disabled","onClick","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.c7b610b9.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDropModule = sdk.getBundleDropModule(\n  process.env.REACT_APP_NFT_CONTRACT\n);\n\nconst tokenModule = sdk.getTokenModule(process.env.REACT_APP_TOKEN_CONTRACT);\nconst voteModule = sdk.getVoteModule(process.env.REACT_APP_VOTE_CONTRACT);\n\nconst App = () => {\n  const { connectWallet, address, error, provider } = useWeb3();\n\n  const signer = provider ? provider.getSigner() : undefined;\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n\n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  };\n\n  const mintNft = () => {\n    setIsClaiming(true);\n    // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n    bundleDropModule\n      .claim(\"0\", 1)\n      .catch((err) => {\n        console.error(\"failed to claim\", err);\n        setIsClaiming(false);\n      })\n      .finally(() => {\n        // Stop loading state.\n        setIsClaiming(false);\n        // Set claim state.\n        setHasClaimedNFT(true);\n        // Show user their fancy new NFT!\n        console.log(\n          `🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n        );\n      });\n  };\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        // If balance is greater than 0, they have our NFT!\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"🌟 this user has a membership NFT!\");\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"😭 this user doesn't have a membership NFT.\");\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) return;\n\n    bundleDropModule\n      .getAllClaimerAddresses(\"0\")\n      .then((addresess) => {\n        console.log(\"🚀 Members addresses\", addresess);\n        setMemberAddresses(addresess);\n      })\n      .catch((err) => {\n        console.error(\"failed to get member list\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) return;\n\n    // Grab all the balances.\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log(\"👜 Amounts\", amounts);\n        setMemberTokenAmounts(amounts);\n      })\n      .catch((err) => {\n        console.error(\"failed to get token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // A simple call to voteModule.getAll() to grab the proposals.\n    voteModule\n      .getAll()\n      .then((proposals) => {\n        // Set state!\n        setProposals(proposals);\n        console.log(\"🌈 Proposals:\", proposals);\n      })\n      .catch((err) => {\n        console.error(\"failed to get proposals\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // We also need to check if the user already voted.\n  useEffect(() => {\n    if (!hasClaimedNFT) return;\n\n    // If we haven't finished retreieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n    if (!proposals.length) return;\n\n    // Check if the user has already voted on the first proposal.\n    voteModule\n      .hasVoted(proposals[0].proposalId, address)\n      .then((hasVoted) => {\n        setHasVoted(hasVoted);\n        console.log(\"🥵 User has already voted\");\n      })\n      .catch((err) => {\n        console.error(\"failed to check if wallet has voted\", err);\n      });\n  }, [hasClaimedNFT, proposals, address]);\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          // If the address isn't in memberTokenAmounts, it means they don't\n          // hold any of our token.\n          memberTokenAmounts[address] || 0,\n          18\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  console.log(\"isClaiming\", isClaiming);\n  return (\n    <>\n      {error && error.name === \"UnsupportedChainIdError\" ? (\n        <div className=\"unsupported-network\">\n          <h2>Please connect to Rinkeby</h2>\n          <p>\n            This dapp only works on the Rinkeby network, please switch networks\n            in your connected wallet.\n          </p>\n        </div>\n      ) : (\n        <>\n          {!address ? (\n            <div className=\"landing\">\n              <h1>Welcome to MemeDAO</h1>\n              <button\n                onClick={() => connectWallet(\"injected\")}\n                className=\"btn-hero\"\n              >\n                Connect your wallet\n              </button>\n            </div>\n          ) : (\n            <>\n              {hasClaimedNFT ? (\n                <div className=\"member-page\">\n                  <h1>🍪DAO Member Page</h1>\n                  <p>Congratulations on being a member</p>\n                  <div>\n                    <div>\n                      <h2>Member List</h2>\n                      <table className=\"card\">\n                        <thead>\n                          <tr>\n                            <th>Address</th>\n                            <th>Token Amount</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {memberList.map((member) => {\n                            return (\n                              <tr key={member.address}>\n                                <td>{shortenAddress(member.address)}</td>\n                                <td>{member.tokenAmount}</td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                    </div>\n                    <div>\n                      <h2>Active Proposals</h2>\n                      <form\n                        onSubmit={async (e) => {\n                          e.preventDefault();\n                          e.stopPropagation();\n\n                          //before we do async things, we want to disable the button to prevent double clicks\n                          setIsVoting(true);\n\n                          // lets get the votes from the form for the values\n                          const votes = proposals.map((proposal) => {\n                            let voteResult = {\n                              proposalId: proposal.proposalId,\n                              //abstain by default\n                              vote: 2,\n                            };\n                            proposal.votes.forEach((vote) => {\n                              const elem = document.getElementById(\n                                proposal.proposalId + \"-\" + vote.type\n                              );\n\n                              if (elem.checked) {\n                                voteResult.vote = vote.type;\n                                return;\n                              }\n                            });\n                            return voteResult;\n                          });\n\n                          // first we need to make sure the user delegates their token to vote\n                          try {\n                            //we'll check if the wallet still needs to delegate their tokens before they can vote\n                            const delegation =\n                              await tokenModule.getDelegationOf(address);\n                            // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n                            if (delegation === ethers.constants.AddressZero) {\n                              //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                              await tokenModule.delegateTo(address);\n                            }\n                            // then we need to vote on the proposals\n                            try {\n                              await Promise.all(\n                                votes.map(async (vote) => {\n                                  // before voting we first need to check whether the proposal is open for voting\n                                  // we first need to get the latest state of the proposal\n                                  const proposal = await voteModule.get(\n                                    vote.proposalId\n                                  );\n                                  // then we check if the proposal is open for voting (state === 1 means it is open)\n                                  if (proposal.state === 1) {\n                                    // if it is open for voting, we'll vote on it\n                                    return voteModule.vote(\n                                      vote.proposalId,\n                                      vote.vote\n                                    );\n                                  }\n                                  // if the proposal is not open for voting we just return nothing, letting us continue\n                                  return;\n                                })\n                              );\n                              try {\n                                // if any of the propsals are ready to be executed we'll need to execute them\n                                // a proposal is ready to be executed if it is in state 4\n                                await Promise.all(\n                                  votes.map(async (vote) => {\n                                    // we'll first get the latest state of the proposal again, since we may have just voted before\n                                    const proposal = await voteModule.get(\n                                      vote.proposalId\n                                    );\n\n                                    //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                                    if (proposal.state === 4) {\n                                      return voteModule.execute(\n                                        vote.proposalId\n                                      );\n                                    }\n                                  })\n                                );\n                                // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                                setHasVoted(true);\n                                // and log out a success message\n                                console.log(\"successfully voted\");\n                              } catch (err) {\n                                console.error(\"failed to execute votes\", err);\n                              }\n                            } catch (err) {\n                              console.error(\"failed to vote\", err);\n                            }\n                          } catch (err) {\n                            console.error(\"failed to delegate tokens\");\n                          } finally {\n                            // in *either* case we need to set the isVoting state to false to enable the button again\n                            setIsVoting(false);\n                          }\n                        }}\n                      >\n                        {proposals.map((proposal, index) => (\n                          <div key={proposal.proposalId} className=\"card\">\n                            <h5>{proposal.description}</h5>\n                            <div>\n                              {proposal.votes.map((vote) => (\n                                <div key={vote.type}>\n                                  <input\n                                    type=\"radio\"\n                                    id={proposal.proposalId + \"-\" + vote.type}\n                                    name={proposal.proposalId}\n                                    value={vote.type}\n                                    //default the \"abstain\" vote to chedked\n                                    defaultChecked={vote.type === 2}\n                                  />\n                                  <label\n                                    htmlFor={\n                                      proposal.proposalId + \"-\" + vote.type\n                                    }\n                                  >\n                                    {vote.label}\n                                  </label>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        ))}\n                        <button disabled={isVoting || hasVoted} type=\"submit\">\n                          {isVoting\n                            ? \"Voting...\"\n                            : hasVoted\n                            ? \"You Already Voted\"\n                            : \"Submit Votes\"}\n                        </button>\n                        <small>\n                          This will trigger multiple transactions that you will\n                          need to sign.\n                        </small>\n                      </form>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"mint-nft\">\n                  <h1>Mint your free 🍪DAO Membership NFT</h1>\n                  <button disabled={isClaiming} onClick={mintNft}>\n                    {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n                  </button>\n                </div>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThirdwebWeb3Provider } from \"@3rdweb/hooks\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nconst supportedChainIds = [4];\n\nconst connectors = {\n  injected: {},\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}\n    >\n      <div className=\"landing\">\n        <App />\n      </div>\n    </ThirdwebWeb3Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}